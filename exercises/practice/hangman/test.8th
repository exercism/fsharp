"hangman-test.8th" f:include
needs exercism/test
with: test
6 tests

test_that("Initially 9 failures are allowed", {
  game <- createGame "foo"
  states <- statesObservable game

  mutable lastProgress = Busy 9
    states.Add(fun state -> lastProgress <- state.progress) |> ignore

    startGame game |> ignore

  expect_equal(lastProgress, <| Busy 9)
})

SKIP-REST-OF-TESTS

test_that("Initially no letters are guessed", {
  game <- createGame "foo"
  states <- statesObservable game

  mutable lastMaskedWord = ""
    states.Add(fun state -> lastMaskedWord <- state.maskedWord) |> ignore

    startGame game |> ignore

    expect_equal(lastMaskedWord
    "___"
    equal?
})

test_that("After 10 failures the game is over", {
  game <- createGame "foo"
  states <- statesObservable game

  mutable lastProgress = Busy 9
    states.Add(fun state -> lastProgress <- state.progress) |> ignore

    startGame game |> ignore

    c(for x in 1..10 do makeGuess 'x' game) |> ignore

  expect_equal(lastProgress, Lose)
    
test_that("Feeding a correct letter removes underscores", {
  game <- createGame "foobar"
  states <- statesObservable game

  mutable lastState = None
    states.Add(fun state -> lastState <- state) |> ignore

    startGame game |> ignore

    makeGuess 'b' game |> ignore

  expect_equal(lastState.Value.progress, <| Busy 9)
    expect_equal(lastState.Value.maskedWord
    "___b__"
    equal?

    makeGuess 'o' game |> ignore

  expect_equal(lastState.Value.progress, <| Busy 9)
    expect_equal(lastState.Value.maskedWord
    "_oob__"
    equal?
    
test_that("Feeding a correct letter twice counts as a failure", {
  game <- createGame "foobar"
  states <- statesObservable game

  mutable lastState = None
    states.Add(fun state -> lastState <- state) |> ignore

    startGame game |> ignore

    makeGuess 'b' game |> ignore

  expect_equal(lastState.Value.progress, <| Busy 9)
    expect_equal(lastState.Value.maskedWord
    "___b__"
    equal?

    makeGuess 'b' game |> ignore

  expect_equal(lastState.Value.progress, <| Busy 8)
    expect_equal(lastState.Value.maskedWord
    "___b__"
    equal?
     
test_that("Getting all the letters right makes for a win", {
  game <- createGame "hello"
  states <- statesObservable game

  mutable lastState = None
    states.Add(fun state -> lastState <- state) |> ignore

    startGame game |> ignore

    makeGuess 'b' game |> ignore

  expect_equal(lastState.Value.progress, <| Busy 8)
    expect_equal(lastState.Value.maskedWord
    "_____"
    equal?

    makeGuess 'e' game |> ignore

  expect_equal(lastState.Value.progress, <| Busy 8)
    expect_equal(lastState.Value.maskedWord
    "_e___"
    equal?

    makeGuess 'l' game |> ignore

  expect_equal(lastState.Value.progress, <| Busy 8)
    expect_equal(lastState.Value.maskedWord
    "_ell_"
    equal?

    makeGuess 'o' game |> ignore

  expect_equal(lastState.Value.progress, <| Busy 8)
    expect_equal(lastState.Value.maskedWord
    "_ello"
    equal?

    makeGuess 'h' game |> ignore

  expect_equal(lastState.Value.progress, Win)
    expect_equal(lastState.Value.maskedWord
    "hello"
    equal?