"sgf-parsing.8th" f:include
needs exercism/test
with: test
14 tests

"Empty input"
    ( parse("" )
    null?)

SKIP-REST-OF-TESTS

"Tree with no nodes"
    ( parse "()" )
    null?

"Node without tree"
    ( parse ";" )
    null?

"Node without properties"
  expected <- (Node (Map.ofList c(], [)))
  expect_equal(parse "(;)", expected)

"Single node tree"
  expected <- (Node (Map.ofList c(("A", ["B"))], []))
  expect_equal(parse "(;Ac(B))", expected)

"Multiple properties"
  expected <- (Node (Map.ofList c(("A", ["b")), ("C", c("d"))], []))
  expect_equal(parse "(;Ac(b)Cc(d))", expected)

"Properties without delimiter"
    ( parse "(;A)" )
    null?

"All lowercase property"
    ( parse "(;ac(b))" )
    null?

"Upper and lowercase property"
    ( parse "(;Aac(b))" )
    null?

"Two nodes"
  expected <- (Node (Map.ofList c(("A", ["B"))], c(Node (Map.ofList [("B", ["C"))], c(]))))
  expect_equal(parse "(;Ac(B);Bc(C))", expected)

"Two child trees"
  expected <- (Node (Map.ofList c(("A", ["B"))], c(Node (Map.ofList [("B", ["C"))], c(]), Node (Map.ofList [("C", ["D"))], c(]))))
  expect_equal(parse "(;Ac(B)(;Bc(C))(;Cc(D)))", expected)

"Multiple property values"
  expected <- (Node (Map.ofList c(("A", ["b", "c", "d"))], []))
  expect_equal(parse "(;Ac(b)c(c)c(d))", expected)

"Semicolon in property value doesn't need to be escaped"
  expected <- (Node (Map.ofList c(("A", ["a;b", "foo")), ("B", c("bar"))], c(Node (Map.ofList [("C", ["baz"))], c(]))))
  expect_equal(parse "(;Ac(a;b)c(foo)Bc(bar);Cc(baz))", expected)

"Parentheses in property value don't need to be escaped"
  expected <- (Node (Map.ofList c(("A", ["x(y)z", "foo")), ("B", c("bar"))], c(Node (Map.ofList [("C", ["baz"))], c(]))))
  expect_equal(parse "(;Ac(x(y)z)c(foo)Bc(bar);Cc(baz))", expected)
