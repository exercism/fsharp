"sgf-parsing.8th" f:include
needs exercism/test
with: test
14 tests

"Empty input"
    ( parse("" )
    null?)

SKIP-REST-OF-TESTS

"Tree with no nodes"
    ( parse "()" )
    null?

"Node without tree"
    ( parse ";" )
    null?

"Node without properties"
  expected <- (Node (Map.ofList [], []))
  expect_equal(parse "(;)", expected)

"Single node tree"
  expected <- (Node (Map.ofList [("A", ["B"])], []))
  expect_equal(parse "(;A[B])", expected)

"Multiple properties"
  expected <- (Node (Map.ofList [("A", ["b"]), ("C", ["d"])], []))
  expect_equal(parse "(;A[b]C[d])", expected)

"Properties without delimiter"
    ( parse "(;A)" )
    null?

"All lowercase property"
    ( parse "(;a[b])" )
    null?

"Upper and lowercase property"
    ( parse "(;Aa[b])" )
    null?

"Two nodes"
  expected <- (Node (Map.ofList [("A", ["B"])], [Node (Map.ofList [("B", ["C"])], []])))
  expect_equal(parse "(;A[B];B[C])", expected)

"Two child trees"
  expected <- (Node (Map.ofList [("A", ["B"])], [Node (Map.ofList [("B", ["C"])], []], Node (Map.ofList [("C", ["D"))], []])))
  expect_equal(parse "(;A[B](;B[C])(;C[D]))", expected)

"Multiple property values"
  expected <- (Node (Map.ofList [("A", ["b", "c", "d"])], []))
  expect_equal(parse "(;A[b][c][d])", expected)

"Semicolon in property value doesn't need to be escaped"
  expected <- (Node (Map.ofList [("A", ["a;b", "foo"]), ("B", ["bar"])], [Node (Map.ofList [("C", ["baz"])], []])))
  expect_equal(parse "(;A[a;b][foo]B[bar];C[baz])", expected)

"Parentheses in property value don't need to be escaped"
  expected <- (Node (Map.ofList [("A", ["x(y]z", "foo")), ("B", ["bar"])], [Node (Map.ofList [("C", ["baz"])], []])))
  expect_equal(parse "(;A[x(y]z)[foo]B[bar];C[baz])", expected)

end-of-tests
;with
