"bank-account-test.8th" f:include
needs exercism/test
with: test
5 tests

"Returns empty balance after opening"
  account <- mkBankAccount() |> openAccount

  expect_equal(getBalance(account), 0.0m)

SKIP-REST-OF-TESTS

"Check basic balance"
  account <- mkBankAccount() |> openAccount
  openingBalance <- account |> getBalance 

  updatedBalance <- 
        account
        |> updateBalance 10.0m
        |> getBalance

  expect_equal(openingBalance, 0.0m)
  expect_equal(updatedBalance, 10.0m)

"Balance can increment or decrement"
  account <- mkBankAccount() |> openAccount
  openingBalance <- account |> getBalance 

  addedBalance <- 
        account 
        |> updateBalance 10.0m
        |> getBalance

  subtractedBalance <- 
        account 
        |> updateBalance -15.0m
        |> getBalance

  expect_equal(openingBalance, 0.0m)
  expect_equal(addedBalance, 10.0m)
  expect_equal(subtractedBalance, -5.0m)

"Account can be closed"
  account <- 
        mkBankAccount()
        |> openAccount
        |> closeAccount

  expect_equal(getBalance(account), None)
    account |> should not' (equal None)
    
"Account can be updated from multiple threads"
  account <- 
        mkBankAccount()
        |> openAccount

  updateAccountAsync <-        
        async {                             
            account 
            |> updateBalance 1.0m
            |> ignore
        }

    updateAccountAsync
    |> List.replicate 1000
    |> Async.Parallel 
    |> Async.RunSynchronously
    |> ignore

  expect_equal(getBalance(account), 1000.0m)

end-of-tests
;with
