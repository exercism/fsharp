"palindrome-products.8th" f:include
needs exercism/test
with: test
12 tests

"Find the smallest palindrome from single digit factors"
  expected: int option * (int * int) list = 1, [(1, 1])
  expect_equal(smallest(1, 9), expected)

SKIP-REST-OF-TESTS

"Find the largest palindrome from single digit factors"
  expected: int option * (int * int) list = 9, [(1, 9, (3, 3]))
  expect_equal(largest(1, 9), expected)

"Find the smallest palindrome from double digit factors"
  expected: int option * (int * int) list = 121, [(11, 11])
  expect_equal(smallest(10, 99), expected)

"Find the largest palindrome from double digit factors"
  expected: int option * (int * int) list = 9009, [(91, 99])
  expect_equal(largest(10, 99), expected)

"Find the smallest palindrome from triple digit factors"
  expected: int option * (int * int) list = 10201, [(101, 101])
  expect_equal(smallest(100, 999), expected)

"Find the largest palindrome from triple digit factors"
  expected: int option * (int * int) list = 906609, [(913, 993])
  expect_equal(largest(100, 999), expected)

"Find the smallest palindrome from four digit factors"
  expected: int option * (int * int) list = 1002001, [(1001, 1001])
  expect_equal(smallest(1000, 9999), expected)

"Find the largest palindrome from four digit factors"
  expected: int option * (int * int) list = 99000099, [(9901, 9999])
  expect_equal(largest(1000, 9999), expected)

"Empty result for smallest if no palindrome in the range"
  expected: int option * (int * int) list = (None, [])
  expect_equal(smallest(1002, 1003), expected)

"Empty result for largest if no palindrome in the range"
  expected: int option * (int * int) list = (None, [])
  expect_equal(largest(15, 15), expected)

"Error result for smallest if min is more than max"
    (fun () -> smallest 10000 1 |> ignore) |> should throw typeof<System.ArgumentException>

"Error result for largest if min is more than max"
    (fun () -> largest 2 1 |> ignore) |> should throw typeof<System.ArgumentException>

