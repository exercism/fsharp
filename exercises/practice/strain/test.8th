"strain-test.8th" f:include
needs exercism/test
with: test
12 tests

"Empty keep"
    [] |> Seq.keep (fun x -> x < 10) |> should be Empty

[<Fact(Skip = "Remove this Skip property to run this test"]>)  
SKIP-REST-OF-TESTS

"Keep everything"
  expect_equal(set [1, 2, 3] |> Seq.keep (fun x -> x < 10) |> Seq.toList, <| [1, 2, 3])

[<Fact(Skip = "Remove this Skip property to run this test"]>) 
"Keep first and last"
  expect_equal([|1, 2, 3|] |> Seq.keep (fun x -> x % 2 <> 0) |> Seq.toList, [1, 3])

"Keep neither first nor last"
  expect_equal([1, 2, 3, 4, 5] |> Seq.keep (fun x -> x % 2 = 0) |> Seq.toList, [2, 4])

"Keep strings"
  words <- "apple zebra banana zombies cherimoya zelot".Split(' ');
  expect_equal(words |> Seq.keep (fun (x:string) -> x.StartsWith("z")) |> Seq.toList, <| List.ofArray("zebra zombies zelot".Split(' ')))

"Keep arrays"
  actual <- [|
                    [|1, 2, 3|];
                    [|5, 5, 5|];
                    [|5, 1, 2|];
                    [|2, 1, 2|];
                    [|1, 5, 2|];
                    [|2, 2, 1|];
                    [|1, 2, 5|]
                    |]
  expected <- [[|5, 5, 5|], [|5, 1, 2|], [|1, 5, 2|], [|1, 2, 5|] ]
  expect_equal(actual |> Seq.keep (Array.exists ((=) 5)) |> Seq.toList, expected)

"Empty discard"
    [] |> Seq.discard (fun x -> x < 10) |> should be Empty

"Discard nothing"
  expect_equal(set [1, 2, 3] |> Seq.discard (fun x -> x > 10) |> Seq.toList, <| [1, 2, 3])

"Discard first and last"
  expect_equal([|1, 2, 3|] |> Seq.discard (fun x -> x % 2 <> 0) |> Seq.toList, [2])

"Discard neither first nor last"
  expect_equal([1, 2, 3, 4, 5] |> Seq.discard (fun x -> x % 2 = 0) |> Seq.toList, [1, 3, 5])

"Discard strings"
  words <- "apple zebra banana zombies cherimoya zelot".Split(' ')
  expect_equal(words |> Seq.discard (fun (x:string) -> x.StartsWith("z")) |> Seq.toList, <| List.ofArray("apple banana cherimoya".Split(' ')))

"Discard arrays"
  actual <- [|
                    [|1, 2, 3|];
                    [|5, 5, 5|];
                    [|5, 1, 2|];
                    [|2, 1, 2|];
                    [|1, 5, 2|];
                    [|2, 2, 1|];
                    [|1, 2, 5|]
                    |]
  expected <- [[|1, 2, 3|], [|2, 1, 2|], [|2, 2, 1|] ]
  expect_equal(actual |> Seq.discard (Array.exists ((=) 5)) |> Seq.toList, expected)