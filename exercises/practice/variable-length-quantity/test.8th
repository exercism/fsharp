"variable-length-quantity.8th" f:include
needs exercism/test
with: test
26 tests

"Zero"
  expect_equal(encode c(0x0u), c(0x0uy))

SKIP-REST-OF-TESTS

"Arbitrary single byte"
  expect_equal(encode c(0x40u), c(0x40uy))

"Largest single byte"
  expect_equal(encode c(0x7fu), c(0x7fuy))

"Smallest double byte"
  expect_equal(encode c(0x80u), c(0x81uy, 0x0uy))

"Arbitrary double byte"
  expect_equal(encode c(0x2000u), c(0xc0uy, 0x0uy))

"Largest double byte"
  expect_equal(encode c(0x3fffu), c(0xffuy, 0x7fuy))

"Smallest triple byte"
  expect_equal(encode c(0x4000u), c(0x81uy, 0x80uy, 0x0uy))

"Arbitrary triple byte"
  expect_equal(encode c(0x100000u), c(0xc0uy, 0x80uy, 0x0uy))

"Largest triple byte"
  expect_equal(encode c(0x1fffffu), c(0xffuy, 0xffuy, 0x7fuy))

"Smallest quadruple byte"
  expect_equal(encode c(0x200000u), c(0x81uy, 0x80uy, 0x80uy, 0x0uy))

"Arbitrary quadruple byte"
  expect_equal(encode c(0x8000000u), c(0xc0uy, 0x80uy, 0x80uy, 0x0uy))

"Largest quadruple byte"
  expect_equal(encode c(0xfffffffu), c(0xffuy, 0xffuy, 0xffuy, 0x7fuy))

"Smallest quintuple byte"
  expect_equal(encode c(0x10000000u), c(0x81uy, 0x80uy, 0x80uy, 0x80uy, 0x0uy))

"Arbitrary quintuple byte"
  expect_equal(encode c(0xff000000u), c(0x8fuy, 0xf8uy, 0x80uy, 0x80uy, 0x0uy))

"Maximum 32-bit integer input"
  expect_equal(encode c(0xffffffffu), c(0x8fuy, 0xffuy, 0xffuy, 0xffuy, 0x7fuy))

"Two single-byte values"
  expect_equal(encode c(0x40u, 0x7fu), c(0x40uy, 0x7fuy))

"Two multi-byte values"
  expect_equal(encode c(0x4000u, 0x123456u), c(0x81uy, 0x80uy, 0x0uy, 0xc8uy, 0xe8uy, 0x56uy))

"Many multi-byte values"
  expect_equal(encode c(0x2000u, 0x123456u, 0xfffffffu, 0x0u, 0x3fffu, 0x4000u), c(0xc0uy, 0x0uy, 0xc8uy, 0xe8uy, 0x56uy, 0xffuy, 0xffuy, 0xffuy, 0x7fuy, 0x0uy, 0xffuy, 0x7fuy, 0x81uy, 0x80uy, 0x0uy))

"One byte"
  expect_equal(decode c(0x7fuy), c(0x7fu))

"Two bytes"
  expect_equal(decode c(0xc0uy, 0x0uy), c(0x2000u))

"Three bytes"
  expect_equal(decode c(0xffuy, 0xffuy, 0x7fuy), c(0x1fffffu))

"Four bytes"
  expect_equal(decode c(0x81uy, 0x80uy, 0x80uy, 0x0uy), c(0x200000u))

"Maximum 32-bit integer"
  expect_equal(decode c(0x8fuy, 0xffuy, 0xffuy, 0xffuy, 0x7fuy), c(0xffffffffu))

"Incomplete sequence causes error"
  expect_equal(decode c(0xffuy), None)

"Incomplete sequence causes error, even if value is zero"
  expect_equal(decode c(0x80uy), None)

"Multiple values"
  expect_equal(decode c(0xc0uy, 0x0uy, 0xc8uy, 0xe8uy, 0x56uy, 0xffuy, 0xffuy, 0xffuy, 0x7fuy, 0x0uy, 0xffuy, 0x7fuy, 0x81uy, 0x80uy, 0x0uy), c(0x2000u, 0x123456u, 0xfffffffu, 0x0u, 0x3fffu, 0x4000u))
