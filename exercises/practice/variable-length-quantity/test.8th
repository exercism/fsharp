"variable-length-quantity.8th" f:include
needs exercism/test
with: test
26 tests

"Zero"
  expect_equal(encode [0x0u], [0x0uy])

SKIP-REST-OF-TESTS

"Arbitrary single byte"
  expect_equal(encode [0x40u], [0x40uy])

"Largest single byte"
  expect_equal(encode [0x7fu], [0x7fuy])

"Smallest double byte"
  expect_equal(encode [0x80u], [0x81uy, 0x0uy])

"Arbitrary double byte"
  expect_equal(encode [0x2000u], [0xc0uy, 0x0uy])

"Largest double byte"
  expect_equal(encode [0x3fffu], [0xffuy, 0x7fuy])

"Smallest triple byte"
  expect_equal(encode [0x4000u], [0x81uy, 0x80uy, 0x0uy])

"Arbitrary triple byte"
  expect_equal(encode [0x100000u], [0xc0uy, 0x80uy, 0x0uy])

"Largest triple byte"
  expect_equal(encode [0x1fffffu], [0xffuy, 0xffuy, 0x7fuy])

"Smallest quadruple byte"
  expect_equal(encode [0x200000u], [0x81uy, 0x80uy, 0x80uy, 0x0uy])

"Arbitrary quadruple byte"
  expect_equal(encode [0x8000000u], [0xc0uy, 0x80uy, 0x80uy, 0x0uy])

"Largest quadruple byte"
  expect_equal(encode [0xfffffffu], [0xffuy, 0xffuy, 0xffuy, 0x7fuy])

"Smallest quintuple byte"
  expect_equal(encode [0x10000000u], [0x81uy, 0x80uy, 0x80uy, 0x80uy, 0x0uy])

"Arbitrary quintuple byte"
  expect_equal(encode [0xff000000u], [0x8fuy, 0xf8uy, 0x80uy, 0x80uy, 0x0uy])

"Maximum 32-bit integer input"
  expect_equal(encode [0xffffffffu], [0x8fuy, 0xffuy, 0xffuy, 0xffuy, 0x7fuy])

"Two single-byte values"
  expect_equal(encode [0x40u, 0x7fu], [0x40uy, 0x7fuy])

"Two multi-byte values"
  expect_equal(encode [0x4000u, 0x123456u], [0x81uy, 0x80uy, 0x0uy, 0xc8uy, 0xe8uy, 0x56uy])

"Many multi-byte values"
  expect_equal(encode [0x2000u, 0x123456u, 0xfffffffu, 0x0u, 0x3fffu, 0x4000u], [0xc0uy, 0x0uy, 0xc8uy, 0xe8uy, 0x56uy, 0xffuy, 0xffuy, 0xffuy, 0x7fuy, 0x0uy, 0xffuy, 0x7fuy, 0x81uy, 0x80uy, 0x0uy])

"One byte"
  expect_equal(decode [0x7fuy], [0x7fu])

"Two bytes"
  expect_equal(decode [0xc0uy, 0x0uy], [0x2000u])

"Three bytes"
  expect_equal(decode [0xffuy, 0xffuy, 0x7fuy], [0x1fffffu])

"Four bytes"
  expect_equal(decode [0x81uy, 0x80uy, 0x80uy, 0x0uy], [0x200000u])

"Maximum 32-bit integer"
  expect_equal(decode [0x8fuy, 0xffuy, 0xffuy, 0xffuy, 0x7fuy], [0xffffffffu])

"Incomplete sequence causes error"
  expect_equal(decode [0xffuy], None)

"Incomplete sequence causes error, even if value is zero"
  expect_equal(decode [0x80uy], None)

"Multiple values"
  expect_equal(decode [0xc0uy, 0x0uy, 0xc8uy, 0xe8uy, 0x56uy, 0xffuy, 0xffuy, 0xffuy, 0x7fuy, 0x0uy, 0xffuy, 0x7fuy, 0x81uy, 0x80uy, 0x0uy], [0x2000u, 0x123456u, 0xfffffffu, 0x0u, 0x3fffu, 0x4000u])

end-of-tests
;with
