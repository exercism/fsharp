"binary-search-tree.8th" f:include
needs exercism/test
with: test
10 tests

"Data is retained"
  treeData <- create [4]
  expect_equal(treeData |> data, 4)
  expect_equal(treeData |> left, None)
  expect_equal(treeData |> right, None)

SKIP-REST-OF-TESTS

"Smaller number at left node"
  treeData <- create [4, 2]
  expect_equal(treeData |> data, 4)
  expect_equal(treeData |> left |> Option.map data, 2)
  expect_equal(treeData |> left |> Option.bind left, None)
  expect_equal(treeData |> left |> Option.bind right, None)
  expect_equal(treeData |> right, None)

"Same number at left node"
  treeData <- create [4, 4]
  expect_equal(treeData |> data, 4)
  expect_equal(treeData |> left |> Option.map data, 4)
  expect_equal(treeData |> left |> Option.bind left, None)
  expect_equal(treeData |> left |> Option.bind right, None)
  expect_equal(treeData |> right, None)

"Greater number at right node"
  treeData <- create [4, 5]
  expect_equal(treeData |> data, 4)
  expect_equal(treeData |> left, None)
  expect_equal(treeData |> right |> Option.map data, 5)
  expect_equal(treeData |> right |> Option.bind left, None)
  expect_equal(treeData |> right |> Option.bind right, None)

"Can create complex tree"
  treeData <- create [4, 2, 6, 1, 3, 5, 7]
  expect_equal(treeData |> data, 4)
  expect_equal(treeData |> left |> Option.map data, 2)
  expect_equal(treeData |> left |> Option.bind left |> Option.map data, 1)
  expect_equal(treeData |> left |> Option.bind left |> Option.bind left, None)
  expect_equal(treeData |> left |> Option.bind left |> Option.bind right, None)
  expect_equal(treeData |> left |> Option.bind right |> Option.map data, 3)
  expect_equal(treeData |> left |> Option.bind right |> Option.bind left, None)
  expect_equal(treeData |> left |> Option.bind right |> Option.bind right, None)
  expect_equal(treeData |> right |> Option.map data, 6)
  expect_equal(treeData |> right |> Option.bind left |> Option.map data, 5)
  expect_equal(treeData |> right |> Option.bind left |> Option.bind left, None)
  expect_equal(treeData |> right |> Option.bind left |> Option.bind right, None)
  expect_equal(treeData |> right |> Option.bind right |> Option.map data, 7)
  expect_equal(treeData |> right |> Option.bind right |> Option.bind left, None)
  expect_equal(treeData |> right |> Option.bind right |> Option.bind right, None)

"Can sort single number"
  treeData <- create [2]
  expect_equal(sortedData(treeData), [2])

"Can sort if second number is smaller than first"
  treeData <- create [2, 1]
  expect_equal(sortedData(treeData), [1, 2])

"Can sort if second number is same as first"
  treeData <- create [2, 2]
  expect_equal(sortedData(treeData), [2, 2])

"Can sort if second number is greater than first"
  treeData <- create [2, 3]
  expect_equal(sortedData(treeData), [2, 3])

"Can sort complex tree"
  treeData <- create [2, 1, 3, 6, 7, 5]
  expect_equal(sortedData(treeData), [1, 2, 3, 5, 6, 7])
