"list-ops.8th" f:include
needs exercism/test
with: test
20 tests

"append empty lists"
    append [] [] |> should be Empty

SKIP-REST-OF-TESTS

"append list to empty list"
  expect_equal(append [] [1, 2, 3, 4], [1, 2, 3, 4])

"append empty list to list"
  expect_equal(append [1, 2, 3, 4] [], [1, 2, 3, 4])

"append non-empty lists"
  expect_equal(append [1, 2] [2, 3, 4, 5], [1, 2, 2, 3, 4, 5])

"concat empty list"
    concat [] |> should be Empty

"concat list of lists"
  expect_equal(concat [[1, 2], [3], [], [4, 5, 6]], [1, 2, 3, 4, 5, 6])

"concat list of nested lists"
  expect_equal(concat [[[1], [2]], [[3]], [[]], [[4, 5, 6]]], [[1], [2], [3], [], [4, 5, 6]])

"filter empty list"
    filter (fun acc -> acc % 2 = 1) [] |> should be Empty

"filter non-empty list"
  expect_equal(filter (fun acc -> acc % 2 = 1) [1, 2, 3, 5], [1, 3, 5])

"length empty list"
  expect_equal(length [], 0)

"length non-empty list"
  expect_equal(length [1, 2, 3, 4], 4)

"map empty list"
    map (fun acc -> acc + 1) [] |> should be Empty

"map non-empty list"
  expect_equal(map (fun acc -> acc + 1) [1, 3, 5, 7], [2, 4, 6, 8])

"foldl empty list"
  expect_equal(foldl (fun acc el -> el * acc) 2 [], 2)

"foldl direction independent function applied to non-empty list"
  expect_equal(foldl (fun acc el -> el + acc) 5 [1, 2, 3, 4], 15)

"foldr empty list"
  expect_equal(foldr (fun acc el -> el * acc) 2 [], 2)

"foldr direction independent function applied to non-empty list"
  expect_equal(foldr (fun acc el -> el + acc) 5 [1, 2, 3, 4], 15)

"reverse empty list"
    reverse [] |> should be Empty

"reverse non-empty list"
  expect_equal(reverse [1, 3, 5, 7], [7, 5, 3, 1])

"reverse list of lists is not flattened"
  expect_equal(reverse [[1, 2], [3], [], [4, 5, 6]], [[4, 5, 6], [], [3], [1, 2]])
