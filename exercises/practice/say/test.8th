"say.8th" f:include
needs exercism/test
with: test
19 tests

"Zero"
  expect_equal(say(0L), (Some "zero"))

SKIP-REST-OF-TESTS

"One"
  expect_equal(say(1L), (Some "one"))

"Fourteen"
  expect_equal(say(14L), (Some "fourteen"))

"Twenty"
  expect_equal(say(20L), (Some "twenty"))

"Twenty-two"
  expect_equal(say(22L), (Some "twenty-two"))

"Thirty"
  expect_equal(say(30L), (Some "thirty"))

"Ninety-nine"
  expect_equal(say(99L), (Some "ninety-nine"))

"One hundred"
  expect_equal(say(100L), (Some "one hundred"))

"One hundred twenty-three"
  expect_equal(say(123L), (Some "one hundred twenty-three"))

"Two hundred"
  expect_equal(say(200L), (Some "two hundred"))

"Nine hundred ninety-nine"
  expect_equal(say(999L), (Some "nine hundred ninety-nine"))

"One thousand"
  expect_equal(say(1000L), (Some "one thousand"))

"One thousand two hundred thirty-four"
  expect_equal(say(1234L), (Some "one thousand two hundred thirty-four"))

"One million"
  expect_equal(say(1000000L), (Some "one million"))

"One million two thousand three hundred forty-five"
  expect_equal(say(1002345L), (Some "one million two thousand three hundred forty-five"))

"One billion"
  expect_equal(say(1000000000L), (Some "one billion"))

"A big number"
  expect_equal(say(987654321123L), (Some "nine hundred eighty-seven billion six hundred fifty-four million three hundred twenty-one thousand one hundred twenty-three"))

"Numbers below zero are out of range"
  expect_equal(say -1L, None)

"Numbers above 999,999,999,999 are out of range"
  expect_equal(say(1000000000000L), None)
