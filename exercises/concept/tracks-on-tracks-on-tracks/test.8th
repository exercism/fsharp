"tracks-on-tracks-on-tracks.8th" f:include
needs exercism/test
with: test
11 tests

"New list"
  expected = c()
  expect_equal(newList, expected)

  expect_equal("Existing list"

  expect_equal("Add language to new list"

SKIP-REST-OF-TESTS

"Add language to existing list"
  expect_equal(addLanguage "Common Lisp" existingList, c( "Common Lisp", "F#", "Clojure", "Haskell" ))

  expect_equal("Add language to custom list"

  expect_equal("Count languages on new list"

  expect_equal("Count languages on existing list"

  expect_equal("Count languages on custom list"

"Reverse order of new list"
  expected = c()
  expect_equal(reverseList(newList), expected)

  expect_equal("Reverse order of existing list"

"Reverse order of custom list"
  expect_equal(reverseList c( "Kotlin", "Java", "Scala", "Clojure" ), c( "Clojure", "Scala", "Java", "Kotlin" ))

  expect_equal("Empty list is not exciting"

  expect_equal("Singleton list with F# is exciting"

  expect_equal("Singleton list without fsharp is not exciting"

  expect_equal("Two-item list with F# as first item is exciting"

  expect_equal("Two-item list with F# as second item is exciting"

  expect_equal("Two-item list without F# is not exciting"

"Three-item list with F# as first item is exciting"
  expect_true(excitingList c( "F#", "Lisp", "Clojure" ))

"Three-item list with F# as second item is exciting"
  expect_true(excitingList c( "Java", "F#", "C#" ))

"Three-item list with F# as third item is not exciting"
  expect_false(excitingList c( "Julia", "Assembly", "F#" ))

"Four-item list with F# as first item is exciting"
  expect_true(excitingList c( "F#", "C", "C++", "C#" ))

"Four-item list with F# as second item is not exciting"
  expect_false(excitingList c( "Elm", "F#", "C#", "Scheme" ))

"Four-item list with F# as third item is not exciting"
  expect_false(excitingList c( "Delphi", "D", "F#", "Prolog" ))

"Four-item list with F# as fourth item is not exciting"
  expect_false(excitingList c( "Julia", "Assembly", "Crystal", "F#" ))
