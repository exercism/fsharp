"interest-is-interesting.8th" f:include
needs exercism/test
with: test
25 tests

"Minimal first interest rate"

SKIP-REST-OF-TESTS

"Tiny first interest rate"

"Maximum first interest rate"

"Minimal second interest rate"

"Tiny second interest rate"

"Maximum second interest rate"

"Minimal third interest rate"

"Tiny third interest rate"

"Large third interest rate"

"Minimal negative interest rate"

"Small negative interest rate"

"Regular negative interest rate"

"Large negative interest rate"

"Interest on negative balance"

"Interest on small balance"

"Interest on medium balance"

"Interest on large balance"

"Annual balance update for empty start balance"

"Annual balance update for small positive start balance"
    annualBalanceUpdate 0.000001m |> should (equalWithin 0.001) 0.000001005m

"Annual balance update for average positive start balance"
    annualBalanceUpdate 1_000.0m |> should (equalWithin 0.001) 1016.210000m

"Annual balance update for large positive start balance"
    annualBalanceUpdate 1_000.0001m |> should (equalWithin 0.001) 1016.210101621m

"Annual balance update for huge positive start balance"
    annualBalanceUpdate 898124017.826243404425m |> should (equalWithin 0.001) 920352587.26744292868451875m

"Annual balance update for small negative start balance"
    annualBalanceUpdate -0.123M |> should (equalWithin 0.001) -0.12695199M

"Annual balance update for large negative start balance"
    annualBalanceUpdate -152964.231M |> should (equalWithin 0.001) -157878.97174203M

  expect_equal("Amount to donate for empty start balance"

  expect_equal("Amount to donate for small positive start balance"

  expect_equal("Amount to donate for average positive start balance"

  expect_equal("Amount to donate for large positive start balance"

"Amount to donate for huge positive start balance"
  expect_equal(amountToDonate 898124017.826243404425m 2.65, 47600572)

  expect_equal("Amount to donate for small negative start balance"

  expect_equal("Amount to donate for large negative start balance"
